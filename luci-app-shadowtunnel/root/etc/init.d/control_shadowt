#!/bin/sh /etc/rc.common
START=50

run_shadowtunnel()
{
	##var defination
	local ipaddr
	local port
	local switch
	local udp
	local pwenable
	local passwd
	local dns_enable
	local localport
	local dns
	local mode
	local hour
	local reset
	local strategy
	local encrypt
	local hosts
	local cmd
	##var assignment
	config_get switch $1 switch
	config_get udp $1 udp
	config_get passwd $1 passwd
	config_get dns_enable $1 dns_enable
	config_get mode $1 mode
	config_get hour $1 hour
	config_get reset $1 reset
	config_get strategy $1 strategy
	config_get encrypt $1 encrypt
	hosts="-dns-hosts /tmp/st_hosts.dat"
	localport="20369"
	dns="53"
	pwenable=`echo $passwd | wc -w`
	cmd="/usr/bin/shadowtunnel/shadowtunnel "
	##pre-treatment
	mode_select
	ip_list
	extra_ip
	hosts_setting
	cron_update $hour
	#####
	##test output
	echo $ipaddr:$port
	echo $localport
	##
	sh /etc/shadowtunnel/shadowtunnel_cron.sh $reset start
	sh /etc/shadowtunnel/ipt.sh $ipaddr $localport $run_mode
	##runing parameters determination
	udp_switch
	next=$ip_result -l :$localport -daemon -forever -redir -lb-method $strategy -lb-hashtarget -m $encrypt -nolog
	cmd=${cmd}${next}
	
case $switch in
enable)
	case $udp in
		normal)
			case $pwenable in
				0)
					case $dns_enable in
                        0)
							/usr/bin/shadowtunnel/shadowtunnel -E $ip_result -l :$localport -daemon -forever -redir -lb-method $strategy -lb-hashtarget -m $encrypt -nolog

                            				;;

                        *)
							dns_setting enable $dns
							/usr/bin/shadowtunnel/shadowtunnel -E $ip_result -l :$localport -dns-server 8.8.8.8:53 -ttl 600 -cache /tmp/dnscache.dat -dns :$dns -daemon -forever -redir -lb-method $strategy -lb-hashtarget -m $encrypt $hosts -nolog
							

                            				;;

                    esac

					;;
					
				*)
					case $dns_enable in
                        0)
							/usr/bin/shadowtunnel/shadowtunnel -E $ip_result -l :$localport -p $passwd -daemon -forever -redir -lb-method $strategy -lb-hashtarget -m $encrypt -nolog

                            				;;

                        *)
							dns_setting enable $dns
							/usr/bin/shadowtunnel/shadowtunnel -E $ip_result -l :$localport -dns-server 8.8.8.8:53 -ttl 600 -cache /tmp/dnscache.dat -p $passwd -dns :$dns -daemon -forever -redir -lb-method $strategy -lb-hashtarget -m $encrypt $hosts -nolog
							

                            				;;

                    esac

					;;


			esac
			
			;;
		udp)
			case $pwenable in
				0)
					case $dns_enable in
                        0)
							/usr/bin/shadowtunnel/shadowtunnel -U -E $ip_result -l :$localport -daemon -forever -redir -lb-method $strategy -lb-hashtarget -m $encrypt -nolog

                            				;;

                        *)
							dns_setting enable $dns
							/usr/bin/shadowtunnel/shadowtunnel -U -E $ip_result -l :$localport -dns-server 8.8.8.8:53 -ttl 600 -cache /tmp/dnscache.dat -dns :$dns -daemon -forever -redir -lb-method $strategy -lb-hashtarget -m $encrypt $hosts -nolog
							

                            				;;

                    			esac
					
					;;
					
				*)
					case $dns_enable in
                        0)
							/usr/bin/shadowtunnel/shadowtunnel -U -E $ip_result -l :$localport -p $passwd -daemon -forever -redir -lb-method $strategy -lb-hashtarget -m $encrypt -nolog

                            				;;

                        *)
							dns_setting enable $dns
							/usr/bin/shadowtunnel/shadowtunnel -U -E $ip_result -l :$localport -dns-server 8.8.8.8:53 -ttl 600 -cache /tmp/dnscache.dat -p $passwd -dns :$dns -daemon -forever -redir -lb-method $strategy -lb-hashtarget -m $encrypt $hosts -nolog
							

                            				;;

                    			esac
					
					;;
			esac
			
			;;
	esac

	;;

disable)
	kill -9 $(pidof shadowtunnel)
    kill -9 $(pidof shadowtunnel)
    sh /etc/shadowtunnel/shadowtunnel_cron.sh 3 stop
    dns_setting disable 0
	sh /etc/shadowtunnel/ipt.sh $ipaddr $localport stop
	/etc/init.d/firewall restart
	rm -f /tmp/st_hosts.dat

	;;

esac

}

start()
{
	config_load shadowtunnel
	config_foreach run_shadowtunnel login
}

stop()
{
	echo "shadowtunnel has stoped."
}

dns_setting()
{
	case $1 in
		enable)
			port=$2
			uci delete dhcp.cfg02411c.nonegcache
			uci delete dhcp.cfg02411c.filterwin2k
			uci set dhcp.@dnsmasq[0].nonwildcard='0'
            		uci set dhcp.@dnsmasq[0].port='5353'
            		/etc/init.d/dnsmasq reload
            		sleep 3
			
			;;

		disable)
			uci delete dhcp.@dnsmasq[0].nonwildcard
			uci delete dhcp.@dnsmasq[0].port
			uci set dhcp.cfg02411c.nonegcache='0'
			uci set dhcp.cfg02411c.filterwin2k='0'
			/etc/init.d/dnsmasq reload
			sleep 3
			
			;;
			
	esac
}

cron_update()
{
    mkdir -p /etc/crontabs
    touch /etc/crontabs/root
    cp /etc/crontabs/root /tmp/crondd
    count=`grep "update_chn_ipaddr.sh" /tmp/crondd -n`
    num=${count%:*}
    sed -i "$num"d /tmp/crondd
    echo "11 $hour * * * sh /etc/shadowtunnel/update_chn_ipaddr.sh" >> /tmp/crondd
    crontab /tmp/crondd
    rm -f /tmp/crondd
    echo "GFW database is up to date"
}

ip_list()
{
	touch /tmp/raw_ip.temp
	touch /tmp/ip_list.temp
    	rm -f /tmp/ip_list.temp
	rm -f /tmp/raw_ip.temp
    	a=`uci get /etc/config/shadowtunnel.@login[0].ipaddr`
    	n=0
    	IFS=" "
    	for v in $a
    	do
        	n=`expr $n + 1`
        	if expr "$v" : '.* .*' > /dev/null
        	then
            		z="\"$v\""
        	else
            		z="$v"
        	fi
	echo "$z" >> /tmp/raw_ip.temp
        printf "-f $z " >> /tmp/ip_list.temp
    	done
    ip_result=`cat /tmp/ip_list.temp`
}

extra_ip()
{
    	a=`uci get /etc/config/shadowtunnel.@login[0].extra`
    	n=0
    	IFS=" "
    	for v in $a
    	do
        	n=`expr $n + 1`
        	if expr "$v" : '.* .*' > /dev/null
        	then
            		z="\"$v\""
        	else
            		z="$v"
        	fi
	echo "$z" >> /tmp/raw_ip.temp
    	done
}

hosts_setting()
{
    rm -f /tmp/st_hosts.dat
    a=`uci get /etc/config/shadowtunnel.@login[0].hosts`
    printf "$a" >> /tmp/st_hosts.dat
    
}

##new
mode_select()
{
	case $mode in
        GFW)
            run_mode=GFW

            ;;

        Global)
            run_mode=start

            ;;
            
    esac
}

udp_switch()
{
	case $udp in
		normal)
			cmd=${cmd}"-E "
			;;
		udp)
			cmd=${cmd}"-U -E "
			;;
	esac
}